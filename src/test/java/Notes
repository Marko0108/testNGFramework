TestNG
Class1

TestNG is a Fm that allows us to build test cases.

All the test cases are written down under the annotation :
@Test


Testing login functionality
1 go to the website
2 enter username and password
3 click login button
4 verify that you’re logged in

Testing login functionality
1 go to the website
2 enter incorrect username and password
3 click login button
4 verify that you’re not logged in

@BeforeMethod —> runs before every @Test
@AfterMethod —> runs after every @Test

DEPENDS ON
Depends on the method that is dependent on a parent method will only execute if the parent method passes.

ENABLE/DISABLE
Enable = false —> once it’s set to that, the test will be ignored


PRIORITY
Tests are executed in alphabetical order, but yo can prioritize them by adding (priority1,2,3) after @Test,
The highest priority is 0!!! You don’t mention it, it’s by default.

ASSERTIONS

Hard assertions - if an assertion failed, testNG will quit the test case an mark it as failed, it will not proceed with the rest of the test cases:
Assert.assertTrue() - takes a boolean value
Assert.assertEquals(actual, expected) - takes 2 Strings

SoftAssertions - if an assertion failed, testNG will not quit the test case and proceed with the rest of the test cases, until it checks all the assertions
1. Declare the obj of soft assertion
   SoftAssert soft=new SoftAssert();
2. Write down an assertions:
    soft.AssertTrue()
    soft.AssertEquals()
3. Once assertions are written in the end - soft.AssertAll() the purpose is to compile all the assertions


DATA PROVIDER
@DataProvider (name=“credentials”)
1.Declare the data in 2D array:

     public obj [][] data(){
     Obj [][]loginData={
    {“Admin”, “123”, “Invalid Credentials”},
     {“admin”, “Hum@nhrms123”, “valid cr”}
     {“ ”, “123”, “password can’t be empty”}
};
     return loginData;
}


@Test(dataProvider =“ credentials”)
Public void login (String username, String password, String message){
}


1. Declare the data in 2 d array
2.@dataProvider (name=“”)
3. @Test(dataProvider =“ name”)
     Public void testCase(String, String, String) // based on what your data is


TESTNG xml file, works same as runner class

Create testNG xml
- install plugin - plugging, marketplace, testng XML plugin
- right click on any class —> create testNG xml—>okay
- right click on project name and reload a project from disk (if the file did not appear automatically)
- go to the xml file and refactor code, option+command+L


When we’re running through groups testNG will not execute before and after methods,
unless you add @BeforeMethod(alwaysRun= true), so it’s good to have always add that!


<test verbose="2" preserve-order="true" name="parallelTest" parallel="classes" thread-count="2">


Verbose  login details
Order - preserve the order of tests
Parallel  running classes in parallel
Thread count - Thread is a division of 1 core into 2 portions on a software level


Class 2

LISTENERS

It’s a class that we implement and it’s going to be observing test cases that we’re going to implement.
As soon as the test case passes or fails the listener will note that.

@Test()

@Test()

@Test()

Listener class implementation:

Public onTestSuccess(){
Sout”hello”
}
Public onTestFailure(){
Sout”hi”
}

We create a whole we class that is called Listener (you can name it differently
Classes implement ITestListener interface, and you will have available methods of that class.
Then you can:
@Override
Public onTestSuccess(){
      take a screenshot
}

@Override
Public onTestFailure(){
      take a screenshot
}

We create a connection between a listener and a class that it will observe with the help of xml file like this:
<listeners>
    <listener class-name="class02.Listener"></listener>
</listeners>
<test verbose="2" preserve-order="true"
      name="/Users/martaostash/intellij/TestNG/src/test/java/class02/Listener.java">
    <classes>
        <class name="class01.Assertions"></class>
    </classes>

If you add result.getName() to the sout of your listeners it will print out the actual name of the test that failed or passes.


ANNOTATIONS
@BeforeClass.
@Test 1
@Test 2
@BeforeMethod.
@AfterClass.

It will be executed in the following order:
Before class
Before method
Test1
Before method
Test2
Afterclass

E.g we can open excel file in before class  cause we will be working with that particular excel in the class, but with different test cases




@BeforeTest
@AfterTest
These methods are referring to xml will be executed before and after <test>.

Similarly we have:
@BeforeSuit
@AfterSuite
Also refer to xml <suite>

Sometimes we will have to connect with database for example, that what we do in beforeSuite.


FRMEWORK(FM)

DIFFERENCE in testNG FM
1. Instead of hooks —> @Before and @AfterMethod (always run=true) on open and launch and close browser
2. Instead of having steps, we have testCases where we use @Test to write test cases
3. Instead of hooks where we take screenshot(sc) , we use testNg listeners, we implemented listeners in utils and in xml file we linked listeners with the class we want to take sc of.
4. Instead of scenario outline data provider to provide different sets of data
